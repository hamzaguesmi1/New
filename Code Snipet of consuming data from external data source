6. Code Snippet :


     Client Sharepoint Preprod env


import json
import requests
import boto3
import logging
import os
from dotenv import load_dotenv
from datetime import datetime
from awsglue.utils import getResolvedOptions
import sys


def sharepoint_function():
    
    today_date = datetime.today().strftime('%Y-%m-%d')
    logger = logging.getLogger() 
    logger.setLevel(logging.INFO)
    args = getResolvedOptions(sys.argv,
                    ["trg_bucket", "TenantName", "SiteName", "TenantID" , "ApplicationID","pickup_folder_path","archive"])
                    
    secrets = boto3.client("secretsmanager")
    trg_bucket = str(args['trg_bucket']) # pickup bucket
    s3 = boto3.resource('s3')       
    s3_client = boto3.client('s3') # initializing s3 client
    bucket = s3.Bucket(trg_bucket) # initializing trg_bucket
    
    # get sharepoint credentials from secrets
    sharepoint_creds = json.loads(secrets.get_secret_value(SecretId='emd-client_sharepoint_secrets')['SecretString'])
    ClientID = sharepoint_creds.get('ClientID')
    ClientSecret = sharepoint_creds.get('ClientSecret')
    
    # Default lifespan of the access token is 60-90 minutes (75 minutes on average)
    
    TenantName = str(args['TenantName'])
    SiteName = str(args['SiteName'])
    TenantID = str(args['TenantID'])
    ApplicationID = str(args['ApplicationID'])
    pickup_folder_path = str(args['pickup_folder_path'])
    archive = str(args['archive'])

    try : 
        #Get Access Token
        url = f"https://accounts.accesscontrol.windows.net/{TenantID}/tokens/OAuth/2"
        #Body
        payload={'grant_type' : 'client_credentials',
           'resource' : f'{ApplicationID}/{TenantName}.sharepoint.com@{TenantID}',
           'client_id' : f'{ClientID}@{TenantID}',
           'client_secret' : ClientSecret
        }
        response = requests.request("POST", url, data=payload)
        response = response.json()
        AccessToken = response['access_token']
    
        
        #Get files url
        paths=[]
        url = f"https://{TenantName}.sharepoint.com/sites/{SiteName}/_api/web/GetFolderByServerRelativeUrl('{pickup_folder_path}')/Files"
    
        headers = {
        'Authorization': f'Bearer {AccessToken}',
        'Accept': 'application/json;odata=verbose'
        }
        
        response = requests.request("GET", url, headers=headers)
        response=response.json()
    
        
        paths=[iterator['ServerRelativeUrl'] for iterator in response['d']['results'] ]
        logger.info(json.dumps(paths))
        # case1: the pickup folder is empty
        if(len(paths)==0) :
            return {
                'statusCode': 200,
                'body': json.dumps('Pickup Folder is Empty!')
            }
        # case2 : the pickup folder is not empty
        else :
            # Get files Content
            for path in paths : 
                url = f"https://{TenantName}.sharepoint.com/sites/{SiteName}/_api/web/GetFileByServerRelativeUrl('{path}')/$value"
                headers = {
                'Authorization': f'Bearer {AccessToken}',
                'Accept': 'application/json;odata=verbose'
                }
                
                response = requests.request("GET", url, headers=headers)
                
                file_extension = path.split('.')[-1]
                file_name = path.split('/')[-1]
            
            
                #Save file 
                upload_file_path = f'/tmp/hold.{file_extension}'
                with open(file=upload_file_path, mode='wb') as file: 
                    file.write(response.content)
                
                #Upload file to pickup bucket
                try : 
                    bucket.upload_file(upload_file_path,file_name)
                except : 
                    return {
                        'statusCode': 200,
                        'body': json.dumps(f'Issue in S3 Bucket!, {file_name} not inserted !')
                    }
                
                
                #Move file to archive
                archives=f'{archive}{today_date}_{file_name}'
                
                url = f"https://{TenantName}.sharepoint.com/sites/{SiteName}/_api/web/GetFileByServerRelativeUrl('{path}')/moveto(newurl='{archives}',flags=1)"
                print(url)
                headers = {
                'Authorization': f'Bearer {AccessToken}',
                'Accept': 'application/json; odata=verbose'
                }
                response = requests.request("POST", url, headers=headers)
    except : 
        return {
            'statusCode': 200,
            'body': json.dumps('Issue is SharePoint API!')
        }
    
    return {
        'statusCode': 200,
        'body': json.dumps('File inserted successfully!')
      }
print(sharepoint_function())
